# -*- coding: utf-8 -*-
"""audio_noise_reduction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Wnu8Nq65REOa9SQVYbc2v7QRw-P3oDUe
"""

#mount drive
from google.colab import drive
drive.mount('/content/drive')

!ls /content/drive/MyDrive/DataDementia/dataset/

! pip install noisereduce

!pip install pedalboard

import librosa
import noisereduce as nr
import numpy as np
import soundfile as sf
import matplotlib.pyplot as plt
import os
from tqdm import tqdm
from IPython.display import Audio
from pedalboard.io import AudioFile
from pedalboard import *

def plot_spectrogram(audio, sr, title):
    stft = librosa.stft(audio)
    spectrogram = librosa.amplitude_to_db(np.abs(stft))
    plt.figure(figsize=(10, 6))
    librosa.display.specshow(spectrogram, sr=sr, x_axis="time", y_axis="hz", cmap="coolwarm")
    plt.colorbar(format="%+2.0f dB")
    plt.title(title)
    plt.show()

path = "/content/drive/MyDrive/DataDementia/dataset"



# Load audio file
file_path = "/Dementia/cookie/001-0.wav"  # Replace with your file
y, sr = librosa.load(path+file_path, sr=None)

# Visualize the original waveform
plt.figure(figsize=(10, 4))
librosa.display.waveshow(y, sr=sr)
plt.title("Original Waveform")
plt.xlabel("Time (s)")
plt.ylabel("Amplitude")
plt.show()

# Select a noise profile from a silent section (e.g., the first 0.5 seconds)
noise_sample = y[:int(sr * 0.5)]  # First 0.5 seconds as noise profile

# Reduce noise
reduced_noise = nr.reduce_noise(y=y, sr=sr, y_noise=noise_sample, prop_decrease=0.9)

# Save the denoised audio
sf.write("denoised_audio.wav", reduced_noise, sr)
print("Denoised audio saved as 'denoised_audio.wav'")

# Visualize the denoised waveform
plt.figure(figsize=(10, 4))
librosa.display.waveshow(reduced_noise, sr=sr)
plt.title("Denoised Waveform")
plt.xlabel("Time (s)")
plt.ylabel("Amplitude")
plt.show()

Audio(data=reduced_noise, rate=sr)

#enhancing through pedalboard
board = Pedalboard([
    NoiseGate(threshold_db=-30, ratio=1.5, release_ms=250),
    Compressor(threshold_db=-16, ratio=4),
    LowShelfFilter(cutoff_frequency_hz=400, gain_db=10, q=1),
    Gain(gain_db=2)
])

effected = board(reduced_noise, sr)

# Visualize the denoised waveform
plt.figure(figsize=(10, 4))
librosa.display.waveshow(effected, sr=sr)
plt.title("Denoised Waveform")
plt.xlabel("Time (s)")
plt.ylabel("Amplitude")
plt.show()

# Play audio
display(Audio(effected, rate=sr))

# Visualize the denoised waveform
plt.figure(figsize=(10, 4))
librosa.display.waveshow(y2, sr=sr2)
plt.title("Denoised Waveform")
plt.xlabel("Time (s)")
plt.ylabel("Amplitude")
plt.show()

def process_audio_files(input_dir, output_dir):
    """
    Processes all audio files in a directory, applying noise reduction and effects,
    and saves the processed audio in another directory.

    Args:
        input_dir (str): Path to the directory containing the input audio files.
        output_dir (str): Path to the directory where processed audio will be saved.

    Returns:
        None
    """
    # Ensure output directory exists
    os.makedirs(output_dir, exist_ok=True)

    # Iterate through all audio files in the input directory
    for file_name in os.listdir(input_dir):
        input_file_path = os.path.join(input_dir, file_name)

        # Check if the file is an audio file (basic check for .wav files)
        if not file_name.lower().endswith(".wav"):
            continue

        # Load audio file
        y, sr = librosa.load(input_file_path, sr=None)

        # Select a noise profile from the first 0.5 seconds
        noise_sample = y[:int(sr * 0.5)]  # First 0.5 seconds as noise profile

        # Reduce noise
        reduced_noise = nr.reduce_noise(y=y, sr=sr, y_noise=noise_sample, prop_decrease=0.9)

        # Apply effects using the Pedalboard chain
        effected = board(reduced_noise, sr)

        # Save the processed audio with the same name in the output directory
        output_file_path = os.path.join(output_dir, file_name)
        sf.write(output_file_path, effected, sr)

        print(f"Processed and saved: {output_file_path}")

path = "/content/drive/MyDrive/DataDementia/dataset"
path2 = "/content/drive/MyDrive/dataset2"

# Example usage
input_directory = path + "/Control/sentence"
output_directory = path2 + "/Control/sentence"
process_audio_files(input_directory, output_directory)

"/Dementia/cookie"